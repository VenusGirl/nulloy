#! /bin/bash

BASENAME=`basename $0`

PREFIX=/usr
DEBUG=no
APP_NAME=nulloy

FORCE_VERSION=no
BUILD_GSTREAMER=yes
BUILD_GSTREAMER_TAGREADER=no
BUILD_TAGLIB=yes
BUILD_VLC=no
BUILD_PHONON=no
BUILD_TESTS=no
UPDATE_CHECK=yes
SUPPORT_SKINS=yes
MAC_UNIVERSAL=no

echo_help()
{
    echo "Usage:  $BASENAME [options]"
    echo '    --no-gstreamer              do not build GStreamer plugin'
    echo '    --gstreamer-tagreader       include TagReader in GStreamer plugin'
    echo '    --vlc                       build VLC plugin'
    echo '    --phonon                    build Phonon plugin'
    echo '    --no-taglib                 do not build TagLib plugin'
    echo '    --no-skins                  disable skins support'
    echo '    --force-version VERSION     overrides version.pri'
    echo '    --no-update-check           disable online check functionality'
    echo '    --prefix PREFIX             installation prefix'
    echo '    --universal                 build for both i386 and x86_64 (Mac only)'
    echo '    --debug                     build in debug mode'
    echo '    --tests                     build unit tests'
}

echo_try()
{
    echo
    echo "Try \`$BASENAME --help' for more information"
}

while test $# -gt 0; do
    case "$1" in
        --prefix)
            shift
            if (command -v realpath &> /dev/null) && [ -d "`dirname $1`" ]; then
                PREFIX=`realpath "$1"`
            else
                PREFIX=`readlink -m "$1"`
            fi
            ;;
        --debug)
            DEBUG=yes ;;
        --force-version)
            shift; FORCE_VERSION=$1 ;;
        --no-gstreamer)
            BUILD_GSTREAMER=no ;;
        --gstreamer-tagreader)
            BUILD_GSTREAMER_TAGREADER=yes ;;
        --vlc)
            BUILD_VLC=yes ;;
        --phonon)
            BUILD_PHONON=yes ;;
        --no-taglib)
            BUILD_TAGLIB=no ;;
        --tests)
            BUILD_TESTS=yes ;;
        --no-skins)
            SUPPORT_SKINS=no ;;
        --no-update-check)
            UPDATE_CHECK=no ;;
        --universal)
            MAC_UNIVERSAL=yes ;;
        --help|-h)
            echo_help; exit 0 ;;
        *)
            echo "$BASENAME: invalid argument: $1"
            echo_try; exit 1
            ;;
    esac
    shift
done

QMAKE_CACHE=`pwd`/.qmake.cache
[ -f $QMAKE_CACHE ] && rm -f $QMAKE_CACHE

check_executable()
{
    VNAME="$1"
    FNAME="$2"

    echo -n "checking for $FNAME..."

    if [[ -z "${!VNAME}" || ! -f "$FNAME" ]]; then
        eval ${VNAME}=$(which "$FNAME" 2>/dev/null)
        if [[ -z "${!VNAME}" ]]; then
            echo "no"
            echo "$BASENAME: Unable to find '$FNAME'. Check the PATH environment variable or try \`$VNAME=/path/to/$FNAME $0'"
            exit 1
        fi
    fi
    if [[ ! -f "${!VNAME}" ]]; then
        echo "no"
        echo "$BASENAME: '${!VNAME}': No such file or directory."
        exit 1
    fi

    echo "${!VNAME}"
}

check_executable QMAKE qmake
check_executable LRELEASE lrelease
echo "LRELEASE = $LRELEASE" >> $QMAKE_CACHE
check_executable PKG_CONFIG pkg-config
echo "PKG_CONFIG = $PKG_CONFIG" >> $QMAKE_CACHE

[ -n "$CFLAGS" ]   && echo "QMAKE_CFLAGS += ${CFLAGS}"     >> $QMAKE_CACHE
[ -n "$CXXFLAGS" ] && echo "QMAKE_CXXFLAGS += ${CXXFLAGS}" >> $QMAKE_CACHE
[ -n "$LDFLAGS" ]  && echo "QMAKE_LFLAGS += ${LDFLAGS}"    >> $QMAKE_CACHE


pkg_check_lib()
{
    $PKG_CONFIG --print-errors $1
    if [ $? -eq 0 ]; then
        echo "found $1"
    else
        echo
        exit 1
    fi
}
[ $BUILD_GSTREAMER == "yes" ]           && pkg_check_lib gstreamer-1.0
[ $BUILD_GSTREAMER_TAGREADER == "yes" ] && pkg_check_lib gstreamer-pbutils-1.0
[ $BUILD_VLC == "yes" ]                 && pkg_check_lib libvlc
[ $BUILD_TAGLIB == "yes" ]              && pkg_check_lib taglib
[ $BUILD_PHONON == "yes" ]              && pkg_check_lib phonon

[ $BUILD_GSTREAMER == "yes" ]           && QMAKE_CONFIG="$QMAKE_CONFIG gstreamer"
[ $BUILD_GSTREAMER_TAGREADER == "yes" ] && QMAKE_CONFIG="$QMAKE_CONFIG gstreamer-tagreader"
[ $BUILD_VLC == "yes" ]                 && QMAKE_CONFIG="$QMAKE_CONFIG vlc"
[ $BUILD_PHONON == "yes" ]              && QMAKE_CONFIG="$QMAKE_CONFIG phonon"
[ $BUILD_TAGLIB == "yes" ]              && QMAKE_CONFIG="$QMAKE_CONFIG taglib"
[ $SUPPORT_SKINS == "no" ]              && QMAKE_CONFIG="$QMAKE_CONFIG no-skins"
[ $MAC_UNIVERSAL == "yes" ]             && QMAKE_CONFIG="$QMAKE_CONFIG x86 x86_64"
[ $UPDATE_CHECK == "no" ]               && QMAKE_CONFIG="$QMAKE_CONFIG no-update-check"
[ $BUILD_TESTS == "yes" ]               && QMAKE_CONFIG="$QMAKE_CONFIG tests" \
                                        && echo "DEFINES += _TESTS_" >> $QMAKE_CACHE
if [ $DEBUG == "yes" ]; then
    QMAKE_CONFIG="$QMAKE_CONFIG debug"
else
    QMAKE_CONFIG="$QMAKE_CONFIG release"
fi

if [ `$QMAKE -query "QMAKE_MKSPECS" | grep -i mingw` ]; then
    QMAKE_CONFIG="$QMAKE_CONFIG unix_mingw"
    APP_NAME=Nulloy
fi

if [ $FORCE_VERSION != "no" ]; then
    echo "Forced version: $FORCE_VERSION"
    echo "N_CONFIG_FORCE_VERSION = $FORCE_VERSION" > $QMAKE_CACHE
fi

echo "N_CONFIG_SUCCESS = yes" >> $QMAKE_CACHE

[ -z "$NULLOY_BUILD_TMP_DIR" ] && NULLOY_BUILD_TMP_DIR=`pwd`/.tmp
[ ! -d "$NULLOY_BUILD_TMP_DIR" ] && mkdir $NULLOY_BUILD_TMP_DIR
echo "TMP_DIR = $NULLOY_BUILD_TMP_DIR" >> $QMAKE_CACHE

if [ `uname | grep -i darwin` ]; then
    QMAKE_EXTRA_OPTIONS="-spec macx-g++"
else
    echo
    echo "Install prefix: $PREFIX"
fi

echo
echo "Running qmake..."

$QMAKE "CONFIG+=$QMAKE_CONFIG" PREFIX="$PREFIX" APP_NAME="$APP_NAME" $QMAKE_EXTRA_OPTIONS
if [ $? -ne 0 ]; then
    echo "$BASENAME: qmake failed"
    exit 1
fi

echo "Nulloy has been configured. Now run \`make'."
echo

exit 0

